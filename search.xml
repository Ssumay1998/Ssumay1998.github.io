<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用Linux命令(持续更新)</title>
    <url>/2020/08/17/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h1 id="常见的Linux命令操作"><a href="#常见的Linux命令操作" class="headerlink" title="常见的Linux命令操作"></a>常见的Linux命令操作</h1><ol>
<li><p>cd    进入</p>
</li>
<li><p>cd .. 返回上一级目录</p>
</li>
<li><p>clear 清理屏幕</p>
</li>
<li><p>pwd 显示当前路径</p>
</li>
<li><p>ls 列出当前目录下的所有文件</p>
</li>
<li><p>exit 退出</p>
</li>
<li><p>touch 创建一个文件。如touch index.js </p>
</li>
<li><p>rm 删除一个文件。如rm index.js</p>
</li>
<li><p>mkdir 新建一个文件夹。如mkdir web</p>
</li>
<li><p>rm -r 删除一个文件夹。 如rm -r web</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;   删除电脑中全部文件。切勿在Linux中使用！</span><br></pre></td></tr></table></figure>
</li>
<li><p>mv 移动文件。如mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p>
</li>
<li><p>history 查看命令历史</p>
</li>
<li><p>help 帮助</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>node安装简洁教程</title>
    <url>/2020/08/17/node%E5%AE%89%E8%A3%85%E7%AE%80%E6%B4%81%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="先检查本地是否安装node"><a href="#先检查本地是否安装node" class="headerlink" title="先检查本地是否安装node"></a>先检查本地是否安装node</h1><p>命令行输入<code>node</code></p>
<p>若显示版本信息（如下图），则已经安装。否则下一步。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghtwy4ugwij30q20843zj.jpg" alt=""></p>
<h1 id="mac安装node"><a href="#mac安装node" class="headerlink" title="mac安装node"></a>mac安装node</h1><p>mac 在终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>

<p>即可安装。</p>
<h1 id="前往node官网或者nodejs中文网"><a href="#前往node官网或者nodejs中文网" class="headerlink" title="前往node官网或者nodejs中文网"></a>前往<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node官网</a>或者<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">nodejs中文网</a></h1><p>下载对应系统的安装包。</p>
<p>windows下载好后一路next安装即可。</p>
<h1 id="确认是否安装完成"><a href="#确认是否安装完成" class="headerlink" title="确认是否安装完成"></a>确认是否安装完成</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 检查node版本</span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"># 检查npm包管理工具版本</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghtx4wzz3uj30xc090jsv.jpg" alt=""></p>
<p>出现以上信息则为安装成功。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>node.js</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Git教程</title>
    <url>/2020/08/17/Git%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言：版本控制"><a href="#前言：版本控制" class="headerlink" title="前言：版本控制"></a>前言：版本控制</h1><h2 id="什么是版本控制"><a href="#什么是版本控制" class="headerlink" title="什么是版本控制"></a>什么是版本控制</h2><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li><p>实现跨区域多人协同开发</p>
</li>
<li><p>追踪和记载一个或者多个文件的历史记录</p>
</li>
<li><p>组织和保护你的源代码和文档</p>
</li>
<li><p>统计工作量</p>
</li>
<li><p>并行开发、提高开发效率</p>
</li>
<li><p>跟踪记录整个软件的开发过程</p>
</li>
<li><p>减轻开发人员的负担，节省时间，同时降低人为错误</p>
<p>简单说就是用于管理多人协同开发项目的技术。没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
</li>
</ul>
<h2 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h2><p>主流的版本控制器有如下这些：</p>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong>（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN</p>
<h2 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h2><h3 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a>本地版本控制</h3><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p>
<h3 id="集中版本控制-SVN"><a href="#集中版本控制-SVN" class="headerlink" title="集中版本控制 SVN"></a>集中版本控制 SVN</h3><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p>
<p>用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<h3 id="分布式版本控制-Git"><a href="#分布式版本控制-Git" class="headerlink" title="分布式版本控制 Git"></a>分布式版本控制 Git</h3><p>每个人都拥有全部的代码！安全隐患！</p>
<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p>
<p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p>
<h3 id="Git与SVN的主要区别"><a href="#Git与SVN的主要区别" class="headerlink" title="Git与SVN的主要区别"></a>Git与SVN的主要区别</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p>
<p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<h1 id="Git安装及环境配置"><a href="#Git安装及环境配置" class="headerlink" title="Git安装及环境配置"></a>Git安装及环境配置</h1><h2 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h2><p>点击<a href="https://git-scm.com/" target="_blank" rel="noopener" title="git官网">Git官网</a>，下载git对应操作系统的版本。</p>
<p>所有东西下载慢的话就可以去找镜像！</p>
<p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">git淘宝镜像</a></p>
<p>windows下无脑下一步即可。</p>
<blockquote>
<p>windows下</p>
<p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p>
<p><strong>Git CMD：</strong>Windows风格的命令行</p>
<p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p>
</blockquote>
<h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><p>所有的配置文件，其实都保存在本地！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config -l				#查看配置</span><br></pre></td></tr></table></figure>

<p>查看不同级别的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看系统config</span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line">#查看当前用户（global）配置</span><br><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<p><strong>设置用户名与邮箱</strong>（用户标识，必要）</p>
<p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;XXXX&quot;  #名称</span><br><span class="line">git config --global user.email XXXXXXXXXX   #邮箱</span><br></pre></td></tr></table></figure>

<p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置</p>
<h1 id="Git工作原理（基本理论）"><a href="#Git工作原理（基本理论）" class="headerlink" title="Git工作原理（基本理论）"></a>Git工作原理（基本理论）</h1><h2 id="git的四个区域"><a href="#git的四个区域" class="headerlink" title="git的四个区域"></a>git的四个区域</h2><p>Git有四个工作区域，三个本地，一个远程：</p>
<blockquote>
<ul>
<li><p>工作区（Working Directory）</p>
<p>工作区。平时存放代码的地方</p>
</li>
<li><p>暂存区(Stage/Index)</p>
<p>临时存放改动。用于保存即将提交的文件列表信息</p>
</li>
<li><p>资源库(Repository或Git Directory)</p>
<p>仓库区（或者说本地仓库），这里面有你提交的所有版本的数据。其中HEAD指向最新放入仓库的版本</p>
</li>
<li><p>远程的git仓库(Remote Directory)</p>
<p>远程仓库。通常是GitHub或者Gitee</p>
</li>
</ul>
</blockquote>
<p>文件在这四个区域之间的转换关系如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghtsemsritj30pk0nwwja.jpg" alt=""></p>
<p>Git本地工作区域如下图：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghtshl83alj30u00k8q4z.jpg" alt=""></p>
<blockquote>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>
</ul>
</blockquote>
<h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p>git的工作流程一般是这样的：</p>
<p>１、在工作目录中添加、修改文件；</p>
<p>２、将需要进行版本管理的文件放入暂存区域；</p>
<p>３、将暂存区域的文件提交到本地git仓库。</p>
<p>4、  将本地仓库的文件push到远程（如GitHub）。</p>
<p>因此，git管理的文件有四种状态：已修改（modified）,已暂存（staged）,已提交(committed)，已推送（pushed）。</p>
<h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><h3 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h3><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1.将本地文件添加到暂存区域</span><br><span class="line">git add .   </span><br><span class="line"></span><br><span class="line"># 2.git commit 将暂存的文件提交到本地仓库</span><br><span class="line">#   -m “XXXX”用来附加提交的备注信息</span><br><span class="line">git commit -m &quot;XXXXX&quot; </span><br><span class="line"></span><br><span class="line"># 3.将本地仓库的文件推送到远程仓库(通常是GitHub)</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#反向操作</span><br><span class="line"># 1.将远程仓库clone到本地仓库</span><br><span class="line">git clone [url]</span><br><span class="line"></span><br><span class="line"># 2.将本地仓库中暂存的文件释放回workspace</span><br><span class="line">git checkout</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghtso1u98ij30u009dab5.jpg" alt=""></p>
<h3 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h3><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>另一种方式是克隆远程目录，将远程服务器上的仓库完全镜像一份至本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 克隆一个项目和它的整个代码历史(版本信息)</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看指定文件状态</span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line">#查看所有文件状态</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>

<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">&#x2F;temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build&#x2F;       #忽略build&#x2F;目录下的所有文件</span><br><span class="line">doc&#x2F;*.txt    #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br></pre></td></tr></table></figure>

<h1 id="使用git上传项目到github"><a href="#使用git上传项目到github" class="headerlink" title="使用git上传项目到github"></a>使用git上传项目到github</h1><ol>
<li><p>首先创建一个本地文件夹（用来当做本地仓库）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把这个文件夹变成Git可管理的仓库</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>例如：在桌面上创建一个gitTest的文件夹，之后cd进入此文件夹的路径里。使用git init命令。</p>
</blockquote>
<blockquote>
<p>这时你会发现gitTest里面多了个.git文件夹，它是Git用来跟踪和管理版本库的。如果你看不到，是因为它默认是隐藏文件，点击打开文件资源管理器点击上方文件按钮，选择更改文件夹和搜素选项在查看一栏设置隐藏文件可见。</p>
</blockquote>
<p>​    这时你就可以把想要上传的项目拷贝到这个本地Git仓库里。（拷贝后你可以通过git status来查看你当前的状态）</p>
<ol start="2">
<li><p>把项目中所有文件暂存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把项目中所有文件暂存</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>
</li>
<li><p>把项目提交到仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把项目提交到仓库</span><br><span class="line">git commit -m “备注信息”</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Github上创建一个Git仓库。你可以直接点New repository来创建，比如创建一个名为gitSpace的仓库。</p>
</li>
<li><p>将本地仓库（gitTest）和远程仓库（gitSpace）进行连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将本地仓库（gitTest）和远程仓库（gitSpace）进行连接。</span><br><span class="line"># 地址为你的github仓库的地址</span><br><span class="line">git remote add origin 地址</span><br></pre></td></tr></table></figure>
</li>
<li><p>关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>上传项目的过程可能需要等一段时间，这时候你再重新刷新你的Github页面进入刚才新建的那个仓库里面就会发现项目已经成功上传了：至此就完成了将本地项目上传到Github的整个过程。</p>
<p>另外，这里有个坑需要注意一下，就是在上面创建远程仓库的时候，如果你勾选了Initialize this repository with a README（就是创建仓库的时候自动给你创建一个README文件），那么到了你将本地仓库内容推送到远程仓库的时候就会报一个错误。</p>
<p>这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure>

<p>这时你再push就能成功了。</p>
<h1 id="Git中的分支"><a href="#Git中的分支" class="headerlink" title="Git中的分支"></a>Git中的分支</h1><p>上面的上传都是在master分支中。</p>
<p>master是主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如要发布时，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
<p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p>
<p>git分支中常用指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记1</title>
    <url>/2020/08/15/HTML%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h5 id="HTML-超文本标记语言"><a href="#HTML-超文本标记语言" class="headerlink" title="HTML  超文本标记语言"></a>HTML  超文本标记语言</h5><h5 id="五大浏览器："><a href="#五大浏览器：" class="headerlink" title="五大浏览器："></a>五大浏览器：</h5><table>
<thead>
<tr>
<th>浏览器</th>
<th>内核</th>
</tr>
</thead>
<tbody><tr>
<td>IE/Edge</td>
<td>Trident</td>
</tr>
<tr>
<td>Firefox</td>
<td>Gecko</td>
</tr>
<tr>
<td>Safari</td>
<td>WebKit</td>
</tr>
<tr>
<td>Opera</td>
<td>Presto（13年之后，宣布加入谷歌阵营，弃用）</td>
</tr>
<tr>
<td>Chrome</td>
<td>Blink （13年从WebKit独立出来，现在chrome和opera都用的blink内核）</td>
</tr>
</tbody></table>
<h6 id="W3C标准由结构-html-表现-css-行为-javascript-三部分组成"><a href="#W3C标准由结构-html-表现-css-行为-javascript-三部分组成" class="headerlink" title="W3C标准由结构(html)   表现(css)  行为(javascript) 三部分组成"></a>W3C标准由结构(html)   表现(css)  行为(javascript) 三部分组成</h6><h6 id="1-标签分块级和行级（内联）两类。"><a href="#1-标签分块级和行级（内联）两类。" class="headerlink" title="1.标签分块级和行级（内联）两类。"></a>1.标签分块级和行级（内联）两类。</h6><p>块级独占一行，能设置宽高，如果不设置，宽度为整行宽度，高度为实际内容高度。</p>
<p>行级不独占一行，不能设置宽高，宽高为内容实际的宽高。</p>
<p>块级标签可以通过设置样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:inline</span><br></pre></td></tr></table></figure>
<p>转换成行级标签<br>行级标签可以通过设置样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:block</span><br></pre></td></tr></table></figure>
<p>转换成块级标签</p>
<h6 id="2-常见标签有："><a href="#2-常见标签有：" class="headerlink" title="2.常见标签有："></a>2.常见标签有：</h6><p>块级：<code>div</code>    <code>p</code>    <code>h1-h6</code>    <code>ul</code>    <code>ol</code>    <code>table</code>    <code>address</code>    <code>pre</code>     等</p>
<p>行级：<code>span</code>    <code>a</code>    <code>b</code>    <code>strong</code>    <code>i</code>    <code>em</code>    <code>sub</code>    <code>sup</code>等</p>
<p>特殊：<code>img</code>属于行级块标签，相当于执行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:inline-block</span><br></pre></td></tr></table></figure>
<p>操作</p>
<p><code>a</code>链接标签可以执行<code>display:inline-block</code>转换成行级块标签，这样就可以调整宽高样式。</p>
<h6 id="3-W3C中的嵌套规范"><a href="#3-W3C中的嵌套规范" class="headerlink" title="3.W3C中的嵌套规范"></a>3.W3C中的嵌套规范</h6><blockquote>
<ol>
<li>块级元素可以包含块级或行级元素，而行级元素只能包含行级元素。</li>
<li>2.<code>p</code>    <code>h1-h6</code>    <code>dt</code>    标签中只能包含行级标签，不能再包含块级标签。</li>
<li>块级与块级并列，行级与行级并列。</li>
</ol>
</blockquote>
<h5 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a><strong>form</strong>标签</h5><p>1.常用属性：</p>
<p>​    <strong>name：</strong>表单名称</p>
<p>​    <strong>action：</strong>表单数据提交的地方（通常是一个后台文件名 .jsp/.php/.asp/.py等，或网址。如果是#，则表示提交到当前文件下）</p>
<p>​    <strong>method：</strong>前端提交数据到后端的方法，主要有: <strong>post</strong>和<strong>get</strong>。默认是<strong>get</strong></p>
<p>2.表单元素分为四类：<strong>input</strong>类    <strong>textarea</strong>类    <strong>select</strong>类    <strong>button</strong>类</p>
<p> 1.<strong>input类</strong>   主要完成输入或按钮发出指令</p>
<p>type属性值：<strong>text</strong>    <strong>password</strong>    <strong>radio</strong>    <strong>checkbox</strong>    <strong>file</strong>    <strong>button</strong>    <strong>image</strong>    <strong>submit</strong>    <strong>reset</strong></p>
<blockquote>
<p>text：单行文本输入框，type默认为text。</p>
<p>属性：placeholder（文本框里默认显示的提示文字）、name（命名）、value（赋予初始值）、minlength和maxlength（最少和最多输入的值）、readonly（只读）、disabled（不能修改）、pattern（正则匹配）</p>
</blockquote>
<blockquote>
<p>password：密码框 </p>
<p>属性：与text一致</p>
</blockquote>
<blockquote>
<p>radio：单选框，通常是两项以上。</p>
<p>属性：name（必须有）、value、checked</p>
</blockquote>
<blockquote>
<p>checkbox：复选框</p>
<p>属性：与radio大致相同</p>
</blockquote>
<blockquote>
<p>file：文件上传按钮</p>
</blockquote>
<blockquote>
<p>button：普通按钮。通常用它去调用脚本代码</p>
<p>常用属性：value（按钮上显示的文字）、disabled（失效）</p>
</blockquote>
<blockquote>
<p>image：图片按钮，用法与button一样。它也有提交功能，与submit一致。</p>
<p>特殊属性：src（用来加载提示图片，用它替换了value）</p>
</blockquote>
<blockquote>
<p>submit：提交按钮，用来将表单数据提交到后台</p>
<p>reset：重置按钮，用来将表单所有组件输入的内容全部清空，还原至初始状态。</p>
<p>常用属性：value（按钮上显示的文字）、disabled（失效）</p>
</blockquote>
<p> 2.<strong>textarea类</strong>    文本域，多行文本框，主要用于输入大批量的内容</p>
<blockquote>
<p>常用属性：name、id、cols（列数）、rows（行数）、pacleholder（默认显示的文字）、required（必须输入）、minlength和maxlength、value</p>
</blockquote>
<p> 3.<strong>select类</strong>    下拉列表框  用<code>option</code>呈现每个选项，默认是单项选择</p>
<blockquote>
<p>属性：multiple（表示可以多选，这时的下拉列表框变成了列表框）、size（最多显示的行数）</p>
</blockquote>
<p> 4.<strong>button类</strong>    普通按钮。可以单独使用，不写在form标签中。如果写在form中有提交功能。</p>
<h5 id="iframe框架标签"><a href="#iframe框架标签" class="headerlink" title="iframe框架标签"></a><strong>iframe</strong>框架标签</h5><p>框架集，用来将多个网页文件组合成一个文件。</p>
<p><code>&lt;iframe&gt;</code>标签会创建包含另外一个文档的内联框架，镶嵌在一个网页中的另一个网页。</p>
<blockquote>
<p>属性：</p>
<p>name：框架名</p>
<p>src：引入的外部html文件</p>
<p>scrolling：滚动条（yes、no、auto）</p>
<p>width和height：宽度和高度</p>
<p>frameborder：是否有边框（1表示有、0表示没有）</p>
<p>marginheight：框架与顶部和底端的距离（百分比或px表示）</p>
<p>marginwidth：框架与左边和右边的距离（百分比或px表示）</p>
</blockquote>
<p>​    </p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
